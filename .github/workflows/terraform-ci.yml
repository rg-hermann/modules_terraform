name: terraform-ci

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: 0
  TERRAFORM_VERSION: 1.9.5
  TFLINT_VERSION: v0.53.0
  TFSecVersion: latest

jobs:
  terraform:
    name: Lint, Validate & Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Terraform Init
        run: |
          terraform -chdir=. init -input=false

      - name: Terraform Format Check
        run: terraform -chdir=. fmt -check -recursive

      - name: Terraform Validate
        run: terraform -chdir=. validate

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Cache TFLint plugin dir
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ runner.os }}-${{ env.TFLINT_VERSION }}-${{ hashFiles('.tflint.hcl') }}
          restore-keys: |
            tflint-${{ runner.os }}-

      - name: TFLint Init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Using TFLint plugin azurerm version pinned in .tflint.hcl"
          if ! tflint --init; then
            echo "init_failed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "init_failed=false" >> $GITHUB_OUTPUT
          tflint --version
        id: tflint_init

      - name: Debug TFLint Plugin Releases (azurerm)
        if: steps.tflint_init.outputs.init_failed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Listing latest azurerm plugin releases (for troubleshooting)..." >&2
          curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
            https://api.github.com/repos/terraform-linters/tflint-ruleset-azurerm/releases \
            | jq '.[0:10] | map({tag: .tag_name, published: .published_at})'
          echo "Consider updating version in .tflint.hcl if the pinned one is missing." >&2

      - name: TFLint Run
        if: steps.tflint_init.outputs.init_failed == 'false'
        run: tflint -f compact

      - name: Install tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          additional_args: --config-file .tfsec.yml --concise-output --soft-fail
        continue-on-error: true
      # Exemplo alternativo (manual) com validação explícita de asset (descomentando se quiser controlar versão):
      # - name: Install tfsec (manual fallback)
      #   if: ${{ false }}
      #   run: |
      #     set -euo pipefail
      #     repo=aquasecurity/tfsec
      #     rel_json=$(curl -sSL --fail-with-body https://api.github.com/repos/${repo}/releases/latest)
      #     asset_url=$(echo "$rel_json" | jq -r '.assets[] | select(.name | test("linux_amd64")) | .browser_download_url' | head -n1)
      #     if [ -z "$asset_url" ]; then echo "Asset não encontrado" >&2; exit 1; fi
      #     echo "Baixando tfsec: $asset_url" >&2
      #     curl -sSL -o tfsec.tgz "$asset_url"
      #     file_type=$(file -b tfsec.tgz || true)
      #     if echo "$file_type" | grep -qi 'gzip'; then tar -xzf tfsec.tgz || true; fi
      #     chmod +x tfsec || chmod +x ./tfsec || true
      #     ./tfsec --version || true

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform -chdir=. plan -no-color -out=tfplan.bin > plan.txt || true
          # Always succeed but capture status
          if grep -q "Error:" plan.txt; then
            echo "plan_failed=true" >> $GITHUB_OUTPUT
          else
            echo "plan_failed=false" >> $GITHUB_OUTPUT
          fi
          echo 'snippet<<EOF' >> $GITHUB_OUTPUT
          head -n 200 plan.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload Plan Artifact
        if: steps.plan.outcome == 'success' && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: plan.txt

      - name: Comment PR with Plan Summary
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ### Terraform Plan Result
            Plan run on commit `${{ github.sha }}`.

            Plan status: `${{ steps.plan.outputs.plan_failed == 'true' && 'FAILED' || 'SUCCESS' }}`

            Download the full plan artifact from the Actions run if truncation occurred.
            <details>
            <summary>Plan (first 200 lines)</summary>
            
            ```
            ${{ steps.plan.outputs.snippet }}
            ```
            </details>
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false

      - name: Failing if Plan Failed
        if: steps.plan.outputs.plan_failed == 'true'
        run: |
          echo "Terraform plan encountered errors." >&2
          exit 1

  security:
    name: Security (tfsec strict)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run tfsec (fail on issues)
        uses: aquasecurity/tfsec-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          additional_args: --config-file .tfsec.yml --minimum-severity MEDIUM

  trivy:
    name: Trivy IaC Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Trivy cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            trivy-${{ runner.os }}-

      - name: Trivy Config (Terraform) Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: config
          format: sarif
          output: trivy-terraform.sarif
          severity: HIGH,CRITICAL,MEDIUM
          ignore-unfixed: true
          skip-dirs: .git,.github/,.terraform/
          hide-progress: true
        env:
          TRIVY_ARG_0: ""

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-terraform.sarif

      - name: Extract Trivy summary
        id: trivy_summary
        run: |
          issues=$(jq '.runs[0].results | length' trivy-terraform.sarif)
          echo "issues=$issues" >> $GITHUB_OUTPUT
          critical=$(jq '[.runs[0].results[] | select(.level=="error")]|length' trivy-terraform.sarif || echo 0)
          echo "critical=$critical" >> $GITHUB_OUTPUT
          echo "Trivy found $issues issues (critical=$critical)"

      - name: Comment PR with Trivy summary
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ### Trivy IaC Scan
            Issues: `${{ steps.trivy_summary.outputs.issues }}` (critical errors: `${{ steps.trivy_summary.outputs.critical }}`)
            SARIF uploaded (Security tab -> Code scanning alerts).
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false

      - name: Fail on findings (>=MEDIUM)
        run: |
          if [ "${{ steps.trivy_summary.outputs.issues }}" -gt 0 ]; then
            echo "Failing due to Trivy findings (>= MEDIUM)." >&2
            exit 1
          fi
